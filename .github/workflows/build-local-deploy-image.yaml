on:
  push:
    branches:
      - main
  # will enable the periodical building later
  # schedule:
  #   # * is a special character in YAML so you have to quote this string
  #   - cron:  '*/10 * * * *'
  #   # - cron:  '* * * * *'      

name: Build Image for Local Deploy

jobs:
  deploy:
    name: build-and-push
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: prod
      AWS_ACCOUNT_ID: '706173320044'
      AWS_PARAMS_PREFIX: uniframe
      AWS_CD_ROLE: uniframe-prod-cd-service-role
      AWS_ENV_REGION: eu-west-1

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.UNIFRAME_CD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.UNIFRAME_CD_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Load aws-cli
        id: aws-cli
        run: |
          pip --no-cache-dir install awscli==1.19.72
          aws sts assume-role --role-arn "arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_CD_ROLE }}" --role-session-name github-actions-cd --external-id github.com | tee >(echo "AccessKeyId=$(jq .Credentials.AccessKeyId | tr -d '"')" >> $GITHUB_ENV)  >(echo "SessionToken=$( jq .Credentials.SessionToken | tr -d '"')" >> $GITHUB_ENV ) >(echo "SecretAccessKey=$(jq .Credentials.SecretAccessKey | tr -d '"')" >> $GITHUB_ENV )
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.UNIFRAME_CD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.UNIFRAME_CD_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_ENV_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AccessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ env.SecretAccessKey }}
          AWS_SESSION_TOKEN: ${{ env.SessionToken }}

      - name: Get Related Params from AWS Parameter store
        id: get-aws-params
        run: |
          aws ssm get-parameters --names "${{ env.AWS_PARAMS_PREFIX }}-${{ env.DEPLOY_ENV }}-ssm-frontend-local-repo-name" --query "Parameters[*].Value | [0]" | echo "ECR_REPOSITORY=$(tr -d '"')" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AccessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ env.SecretAccessKey }}
          AWS_SESSION_TOKEN: ${{ env.SessionToken }}

      - name: Get Related Params from AWS Secret manager
        id: get-aws-secret
        run: |
          echo $(aws secretsmanager get-secret-value --secret-id ${PRODUCT_PREFIX}-${DEPLOY_ENV}-oauth-github-client-secret --region eu-west-1 --query SecretString --output text) | jq .OAUTH2_GITHUB_CLIENT_ID | echo "OAUTH2_GITHUB_CLIENT_ID=$(tr -d '"')" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AccessKeyId }}
          AWS_SECRET_ACCESS_KEY: ${{ env.SecretAccessKey }}
          AWS_SESSION_TOKEN: ${{ env.SessionToken }}

      - name: Get Git hash, branch name and date
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=date::$(date +'%Y-%m-%d-%H-%M')"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          #IMAGE_TAG: ${{ steps.date.outputs.date }}-${{ github.sha }}-local
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build --build-arg DNS_NAME=localhost --build-arg HTTP_SCHEMA=http --build-arg IMAGE_BUILD_DATE=${{ steps.date.outputs.date }} --build-arg OAUTH2_GITHUB_CLIENT_ID=${OAUTH2_GITHUB_CLIENT_ID} --build-arg VUE_APP_ENVIRONMENT=${{ env.DEPLOY_ENV }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
